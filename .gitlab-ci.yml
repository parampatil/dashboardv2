include:
  - project: "devops/gitlab-templates"
    ref: main
    file: "/.gitlab-ci_template.yml"

variables:
   CI_PROJECT_NAME: "admin-dashboard-omnipresence"
  #  GAR_FOLDER: "internal-web-apps"
  #  FOLDER: "internal-web-apps"


# # .gitlab-ci-template.yml
# stages:
#   - build
#   - push
#   - deploy


# variables:
#    CI_PROJECT_NAME: "admin-dashboard-omnipresence"
#    DOCKER_BUILDKIT: 1
#    GAR_REGION: "us-east1"
#    GAR_PROJECT_ID: "sparrow-360world"
#    GAR_REPO: "gar-360world-docker"
#    GAR_FOLDER: "internal-web-apps"
#    FOLDER: "internal-web-apps"
#    NAMESPACE: "360world"
#    GKE_CLUSTER: "g-use1-k8s-sparrow-prod"
#    GKE_REGION: "us-east1"
#    HELM_RELEASE_NAME: "$CI_PROJECT_NAME-release"
#    HELM_CHART_VERSION: "0.1.0"
#    HELM_REL_FLDR_NAME: "360world-apps"
#   #  CI_REGISTRY: "cr.360world.com"
#   #  CI_REGISTRY_USER: "cr-user"
#    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
#    IMAGE_NAME_GAR: "$GAR_REGION-docker.pkg.dev/$GAR_PROJECT_ID/$GAR_REPO/$GAR_FOLDER/$CI_PROJECT_NAME:$IMAGE_TAG"
#   #  IMAGE_NAME_CR: "$CI_REGISTRY/$FOLDER/$CI_PROJECT_NAME:$IMAGE_TAG"

# # Step 1: Build Docker Image
# docker-build:
#   stage: build
#   image: docker:23.0.6
#   script:
#     - apk add --no-cache bash curl
#     - mkdir -p $HOME/.docker && touch $HOME/.docker/config.json
#     - docker build --no-cache -t "$IMAGE_NAME_GAR" .
#   rules:
#     - if: $CI_COMMIT_TAG
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


# # Step 2: Push to GAR & CR
# push-to-registry:
#   stage: push
#   image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
#   before_script:
#     - echo "$GCP_SA_KEY" | base64 -d > /tmp/gcp-key.json
#     - gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
#     - gcloud auth configure-docker "$GAR_REGION-docker.pkg.dev"
#     # - echo "Logging into on-prem registry..."
#     # - echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
#   script:
#     - docker push "$IMAGE_NAME_GAR"
#     # - docker push "$IMAGE_NAME_CR"
#   rules:
#     - if: $CI_COMMIT_TAG
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# deploy-to-gke:
#   rules:
#     - if: $CI_COMMIT_TAG
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#   stage: deploy
#   image: gcr.io/google.com/cloudsdktool/cloud-sdk:latest
#   before_script:
#     - |
#       apt-get update && apt-get install -y bash curl jq
#       echo "Decoding GCP Service Account Key..."
#       echo "$GCP_SA_KEY" | base64 -d > /tmp/gcp-key.json
#       chmod 600 /tmp/gcp-key.json
#       gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
#       gcloud config set project "$GAR_PROJECT_ID"
#       gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION"
#       curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
#       helm version
#   script:
#     - |
#       echo "Fetching Helm releases in namespace $NAMESPACE..."
#       helm list -n "$NAMESPACE"
#       helm_params="--atomic --wait-for-jobs --timeout "5m" -n ${NAMESPACE}"
#       helm registry login -u oauth2accesstoken -p "$(gcloud auth print-access-token)" $GAR_REGION-docker.pkg.dev
#       helm pull oci://$GAR_REGION-docker.pkg.dev/$GAR_PROJECT_ID/$GAR_REPO/helm/$HELM_REL_FLDR_NAME --version $HELM_CHART_VERSION
#       tar -xzf $HELM_REL_FLDR_NAME-$HELM_CHART_VERSION.tgz
#       CI_PROJECT_NAME_convert=$(echo "$CI_PROJECT_NAME" | sed 's/-/_/g')
#       echo "helm upgrade -i $helm_params $CI_PROJECT_NAME ./$HELM_REL_FLDR_NAME/charts/$CI_PROJECT_NAME --set $CI_PROJECT_NAME_convert.image.tag="$IMAGE_TAG""
#       helm upgrade -i $helm_params $CI_PROJECT_NAME ./$HELM_REL_FLDR_NAME/charts/$CI_PROJECT_NAME --set $CI_PROJECT_NAME_convert.image.tag="$IMAGE_TAG"


# stages:''
#   - build
#   - deploy

# variables:
#   CI_REGISTRY: cr.360world.com
#   CI_REGISTRY_USER: cr-user
#   CI_PROJECT_NAME: admin-dashboard-omnipresence
#   IMAGE_TAG: $CI_COMMIT_TAG
#   DOCKER_BUILDKIT: 1

# docker-build:
#   stage: build
#   image:
#     name: docker:23.0.6
#   script:
#     - apk add --no-cache bash curl
#     - mkdir -p $HOME/.docker && touch $HOME/.docker/config.json
#     - echo "{\"auths\":{\"https://${CI_REGISTRY}/v2/\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > $HOME/.docker/config.json
#     # Build the Docker image
#     - docker build -t ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${IMAGE_TAG} .
#     # Push the image to the registry
#     - docker push ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${IMAGE_TAG}
#     # Remove the local build 
#     - docker rmi ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${IMAGE_TAG}
#   rules:
#     - if: $CI_COMMIT_TAG
# k8s-deploy:
#   stage: deploy
#   image: curlimages/curl:8.7.1
#   script:
#     - sed -i -e 's|#IMAGE_VERSION#|'${CI_COMMIT_TAG}'|g' kubernetes/deployment.yaml
#     - cat kubernetes/deployment.yaml
#     - 'curl -k -X PUT https://prod-k8s.360world.com/apis/apps/v1/namespaces/prod-backend/deployments/admin-dashboard-omnipresence -H "Authorization: Bearer ${CI_K8S_TOKEN}" -H "Content-Type: application/yaml" --data-binary "@kubernetes/deployment.yaml"'
#   dependencies:
#     - docker-build
#   rules:
#     - if: $CI_COMMIT_TAG